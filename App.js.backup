import React, { useState, useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import { StatusBar } from 'expo-status-bar';
import { View, Platform } from 'react-native';
import { Ionicons, Feather } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Location from 'expo-location';
import * as Notifications from 'expo-notifications';
import { LinearGradient } from 'expo-linear-gradient';

// Import Screens
import ForecastScreen from './screens/ForecastScreen';
import LiveDataScreen from './screens/LiveDataScreen';
import MyLocationsScreen from './screens/MyLocationsScreen';
import MenuScreen from './screens/MenuScreen';

// Import Placeholder Screens
import PreparednessScreen from './screens/placeholders/PreparednessScreen';
import EmergencyNavigationScreen from './screens/placeholders/EmergencyNavigationScreen';
import EmergencyResponseScreen from './screens/placeholders/EmergencyResponseScreen';
import CommunicationScreen from './screens/placeholders/CommunicationScreen';
import PostFloodScreen from './screens/placeholders/PostFloodScreen';

// Context Providers
import { FloodProvider } from './context/FloodContext';
import { LocationProvider } from './context/LocationContext';
import { UserProvider } from './context/UserContext';

const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();

// Configure notifications
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

// Custom Tab Bar with FloodAid style
function TabNavigator() {
  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarIcon: ({ focused, color, size }) => {
          let IconComponent = Feather;
          let iconName;
          
          if (route.name === 'Forecast') {
            IconComponent = Ionicons;
            iconName = focused ? 'cloud' : 'cloud-outline';
          } else if (route.name === 'Live Data') {
            IconComponent = Ionicons;
            iconName = focused ? 'map' : 'map-outline';
          } else if (route.name === 'My Locations') {
            IconComponent = Ionicons;
            iconName = focused ? 'location' : 'location-outline';
          } else if (route.name === 'More') {
            IconComponent = Ionicons;
            iconName = focused ? 'menu' : 'menu-outline';
          }
          
          return <IconComponent name={iconName} size={size} color={color} />;
        },
        tabBarActiveTintColor: '#2196F3',
        tabBarInactiveTintColor: '#666',
        tabBarStyle: {
          position: 'absolute',
          bottom: 0,
          left: 0,
          right: 0,
          elevation: 0,
          backgroundColor: 'rgba(255,255,255,0.95)',
          borderTopColor: 'rgba(0,0,0,0.1)',
          height: Platform.OS === 'ios' ? 85 : 65,
          paddingTop: 5,
          paddingBottom: Platform.OS === 'ios' ? 25 : 10,
        },
        tabBarLabelStyle: {
          fontSize: 12,
          fontWeight: '500',
        },
        headerShown: false,
      })}
    >
      <Tab.Screen 
        name="Forecast" 
        component={ForecastScreen}
        options={{ title: 'Forecast' }}
      />
      <Tab.Screen 
        name="Live Data" 
        component={LiveDataScreen}
        options={{ title: 'Live Data' }}
      />
      <Tab.Screen 
        name="My Locations" 
        component={MyLocationsScreen}
        options={{ title: 'My Locations' }}
      />
      <Tab.Screen 
        name="More" 
        component={MenuScreen}
        options={{ title: 'More' }}
      />
    </Tab.Navigator>
  );
}

// Stack Navigator for Modal Screens
function StackNavigator() {
  return (
    <Stack.Navigator
      screenOptions={{
        headerShown: false,
        presentation: 'card',
      }}
    >
      <Stack.Screen name="MainTabs" component={TabNavigator} />
      <Stack.Screen 
        name="PreparednessScreen" 
        component={PreparednessScreen}
        options={{
          presentation: 'modal',
          headerShown: true,
          headerTitle: 'Preparedness Guides',
          headerBackTitleVisible: false,
        }}
      />
      <Stack.Screen 
        name="EmergencyNavigationScreen" 
        component={EmergencyNavigationScreen}
        options={{
          presentation: 'modal',
          headerShown: true,
          headerTitle: 'Emergency Navigation',
          headerBackTitleVisible: false,
        }}
      />
      <Stack.Screen 
        name="EmergencyResponseScreen" 
        component={EmergencyResponseScreen}
        options={{
          presentation: 'modal',
          headerShown: true,
          headerTitle: 'Emergency Response',
          headerBackTitleVisible: false,
        }}
      />
      <Stack.Screen 
        name="CommunicationScreen" 
        component={CommunicationScreen}
        options={{
          presentation: 'modal',
          headerShown: true,
          headerTitle: 'Emergency Communication',
          headerBackTitleVisible: false,
        }}
      />
      <Stack.Screen 
        name="PostFloodScreen" 
        component={PostFloodScreen}
        options={{
          presentation: 'modal',
          headerShown: true,
          headerTitle: 'Post-Flood Recovery',
          headerBackTitleVisible: false,
        }}
      />
    </Stack.Navigator>
  );
}

export default function App() {
  const [isReady, setIsReady] = useState(false);
  const [initialNotification, setInitialNotification] = useState(null);

  useEffect(() => {
    prepareApp();
  }, []);

  const prepareApp = async () => {
    try {
      // Request notification permissions
      const { status } = await Notifications.requestPermissionsAsync();
      if (status !== 'granted') {
        console.log('Notification permission not granted');
      }

      // Check if app was opened from a notification
      const notification = await Notifications.getLastNotificationResponseAsync();
      setInitialNotification(notification);

      // Configure notification listeners
      const notificationListener = Notifications.addNotificationReceivedListener(notification => {
        console.log('Notification received:', notification);
      });

      const responseListener = Notifications.addNotificationResponseReceivedListener(response => {
        console.log('Notification response:', response);
      });

      // App is ready
      setIsReady(true);

      return () => {
        Notifications.removeNotificationSubscription(notificationListener);
        Notifications.removeNotificationSubscription(responseListener);
      };
    } catch (error) {
      console.log('Error preparing app:', error);
      setIsReady(true); // Continue even if setup fails
    }
  };

  if (!isReady) {
    // You could show a splash screen here
    return null;
  }

  return (
    <UserProvider>
      <LocationProvider>
        <FloodProvider>
          <View style={{ flex: 1 }}>
            <NavigationContainer>
              <StackNavigator />
            </NavigationContainer>
            <StatusBar style="auto" />
          </View>
        </FloodProvider>
      </LocationProvider>
    </UserProvider>
  );
}